---
import ImageWrapper from '../misc/ImageWrapper.astro'
import { Icon } from 'astro-icon/components'

interface Props {
  photos: Array<{
    src: string
    alt: string
  }>
  class?: string
}

const { photos, className } = Astro.props
---
<div class:list={['photo-gallery', className]}>
  <!-- 瀑布流容器 -->
  <div class="masonry-grid">
    {photos.map((photo, index) => (
      <div key={index} class="masonry-item group relative overflow-hidden rounded-lg bg-[var(--card-bg)] transition-all duration-300 hover:shadow-lg hover:shadow-[var(--primary)/20] cursor-pointer" onclick="openImageModal('{photo.src}', '{photo.alt}')">
        <ImageWrapper
          src={photo.src}
          alt={photo.alt}
          class="w-full h-auto object-cover transition-transform duration-700 group-hover:scale-110"
        />
        <div class="absolute inset-0 flex items-center justify-center bg-black/30 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
          <Icon
            name="material-symbols:zoom-in"
            class="text-white text-4xl"
          />
        </div>
      </div>
    ))}
  </div>
</div>

<!-- 图片查看模态框 -->
<div id="imageModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/90 opacity-0 pointer-events-none transition-opacity duration-300">
  <button class="absolute top-4 right-4 text-white text-4xl" onclick="closeImageModal()">&times;</button>
  <div class="max-w-4xl max-h-[90vh] p-4">
    <img id="modalImage" src="" alt="" class="max-w-full max-h-[80vh] object-contain">
    <p id="modalAlt" class="mt-4 text-white text-center"></p>
  </div>
</div>

<script>
  function openImageModal(src, alt) {
    const modal = document.getElementById('imageModal');
    const modalImage = document.getElementById('modalImage');
    const modalAlt = document.getElementById('modalAlt');

    modalImage.src = src;
    modalAlt.textContent = alt;
    modal.classList.remove('opacity-0', 'pointer-events-none');
    document.body.style.overflow = 'hidden';
  }

  function closeImageModal() {
    const modal = document.getElementById('imageModal');
    modal.classList.add('opacity-0', 'pointer-events-none');
    document.body.style.overflow = '';
  }

  // 点击模态框外部关闭
  document.getElementById('imageModal')?.addEventListener('click', (e) => {
    if (e.target === document.getElementById('imageModal')) {
      closeImageModal();
    }
  });
</script>

<style>
  .photo-gallery {
    padding: 1rem 0;
  }

  /* 瀑布流布局 */
  .masonry-grid {
    column-count: 1;
    column-gap: 1rem;
  }

  @media (min-width: 640px) {
    .masonry-grid {
      column-count: 2;
    }
  }

  @media (min-width: 768px) {
    .masonry-grid {
      column-count: 3;
    }
  }

  @media (min-width: 1024px) {
    .masonry-grid {
      column-count: 4;
    }
  }

  .masonry-item {
    break-inside: avoid;
    margin-bottom: 1rem;
  }

  /* 移除旧的图片加载动画样式 */
</style>